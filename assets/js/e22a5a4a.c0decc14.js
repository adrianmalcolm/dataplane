"use strict";(self.webpackChunk_grafana_dataplane_website=self.webpackChunk_grafana_dataplane_website||[]).push([[147],{876:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var l=a(2784);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=l.createContext({}),m=function(e){var t=l.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=m(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=m(a),k=n,g=u["".concat(s,".").concat(k)]||u[k]||d[k]||r;return a?l.createElement(g,i(i({ref:t},p),{},{components:a})):l.createElement(g,i({ref:t},p))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return l.createElement.apply(null,i)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},785:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var l=a(7896),n=(a(2784),a(876));const r={},i="Logs",o={unversionedId:"logs",id:"logs",title:"Logs",description:"Status: EARLY Draft/Proposal",source:"@site/../../docs/contract/logs.md",sourceDirName:".",slug:"/logs",permalink:"/dataplane/logs",draft:!1,editUrl:"https://github.com/grafana/dataplane/edit/main/docusaurus/website/../../docs/contract/logs.md",tags:[],version:"current",frontMatter:{},sidebar:"doc",previous:{title:"Numeric Kind Formats",permalink:"/dataplane/numeric"},next:{title:"Heatmap",permalink:"/dataplane/heatmap"}},s={},m=[{value:"LogLines",id:"loglines",level:2},{value:"Properties and field requirements",id:"properties-and-field-requirements",level:3},{value:"Example",id:"example",level:3},{value:"Meta data requirements",id:"meta-data-requirements",level:3},{value:"Invalid cases",id:"invalid-cases",level:3},{value:"Useful links",id:"useful-links",level:2}],p={toc:m},u="wrapper";function d(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"logs"},"Logs"),(0,n.kt)("p",null,"Status: EARLY Draft/Proposal"),(0,n.kt)("h2",{id:"loglines"},"LogLines"),(0,n.kt)("p",null,"Version: 0.0"),(0,n.kt)("h3",{id:"properties-and-field-requirements"},"Properties and field requirements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Time field")," - ",(0,n.kt)("em",{parentName:"li"},"required"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The first time field with the name ",(0,n.kt)("inlineCode",{parentName:"li"},"timestamp")," is the time field."),(0,n.kt)("li",{parentName:"ul"},"it must be non nullable"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Body field")," - ",(0,n.kt)("em",{parentName:"li"},"required"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The first string field with the name ",(0,n.kt)("inlineCode",{parentName:"li"},"body")," is the body field."),(0,n.kt)("li",{parentName:"ul"},"it must be non nullable"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Severity field")," - ",(0,n.kt)("em",{parentName:"li"},"optional"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The first string field with the name ",(0,n.kt)("inlineCode",{parentName:"li"},"severity")," is the severity field."),(0,n.kt)("li",{parentName:"ul"},"Represents the severity/level of the log line"),(0,n.kt)("li",{parentName:"ul"},"If no severity field is found, consumers/client will decide the log level. Example: logs panel will try to parse the message field and determine the log level"),(0,n.kt)("li",{parentName:"ul"},"Log level can be one of the values specified in the docs ",(0,n.kt)("a",{parentName:"li",href:"https://grafana.com/docs/grafana/latest/explore/logs-integration/"},"here")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ID field")," - ",(0,n.kt)("em",{parentName:"li"},"optional"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The first string field with the name ",(0,n.kt)("inlineCode",{parentName:"li"},"id")," is the id field."),(0,n.kt)("li",{parentName:"ul"},"Unique identifier of the log line"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Attributes field")," - ",(0,n.kt)("em",{parentName:"li"},"optional"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"The first string field with the name ",(0,n.kt)("inlineCode",{parentName:"li"},"attributes")," is the attributes field."),(0,n.kt)("li",{parentName:"ul"},'Other systems may refer to this with other names, for example Loki calls these "labels"'),(0,n.kt)("li",{parentName:"ul"},"This field represent additional attributes of the log line."),(0,n.kt)("li",{parentName:"ul"},"Field type must be json raw message type. Example value: ",(0,n.kt)("inlineCode",{parentName:"li"},"{}"),", ",(0,n.kt)("inlineCode",{parentName:"li"},'{"hello":"world", "foo": 123.45, "bar" :["yellow","red"], "baz" : { "name": "alice" }}'),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Should not be empty string."),(0,n.kt)("li",{parentName:"ul"},"Value should be represented with ",(0,n.kt)("inlineCode",{parentName:"li"},"Record<string,any>")," type in javascript.")))))),(0,n.kt)("p",null,"Any other field is ignored."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("p",null,"Following is an example of a logs frame in go"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-go"},'data.NewFrame(\n    "logs",\n    data.NewField("timestamp", nil, []time.Time{time.UnixMilli(1645030244810), time.UnixMilli(1645030247027), time.UnixMilli(1645030247027)}),\n    data.NewField("body", nil, []string{"message one", "message two", "message three"}),\n    data.NewField("severity", nil, []string{"critical", "error", "warning"}),\n    data.NewField("id", nil, []string{"xxx-001", "xyz-002", "111-003"}),\n    data.NewField("attributes", nil, []json.RawMessage{[]byte(`{}`), []byte(`{"hello":"world"}`), []byte(`{"hello":"world", "foo": 123.45, "bar" :["yellow","red"], "baz" : { "name": "alice" }}`)}),\n)\n')),(0,n.kt)("p",null,"the same can be represented as"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name: timestamp ",(0,n.kt)("br",null)," Type: []time.Time"),(0,n.kt)("th",{parentName:"tr",align:null},"Name: body ",(0,n.kt)("br",null)," Type: []string"),(0,n.kt)("th",{parentName:"tr",align:null},"Name: severity ",(0,n.kt)("br",null)," Type: []","*","string"),(0,n.kt)("th",{parentName:"tr",align:null},"Name: id ",(0,n.kt)("br",null)," Type: []","*","string"),(0,n.kt)("th",{parentName:"tr",align:null},"Name: attributes ",(0,n.kt)("br",null)," Type: []json.RawMessage"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"2022-02-16 16:50:44.810 +0000 GMT"),(0,n.kt)("td",{parentName:"tr",align:null},"message one"),(0,n.kt)("td",{parentName:"tr",align:null},"critical"),(0,n.kt)("td",{parentName:"tr",align:null},"xxx-001"),(0,n.kt)("td",{parentName:"tr",align:null},"{}")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"2022-02-16 16:50:47.027 +0000 GMT"),(0,n.kt)("td",{parentName:"tr",align:null},"message two"),(0,n.kt)("td",{parentName:"tr",align:null},"error"),(0,n.kt)("td",{parentName:"tr",align:null},"xyz-002"),(0,n.kt)("td",{parentName:"tr",align:null},'{"hello":"world"}')),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"2022-02-16 16:50:47.027 +0000 GMT"),(0,n.kt)("td",{parentName:"tr",align:null},"message three"),(0,n.kt)("td",{parentName:"tr",align:null},"warning"),(0,n.kt)("td",{parentName:"tr",align:null},"111-003"),(0,n.kt)("td",{parentName:"tr",align:null},'{"hello":"world", "foo": 123.45, "bar" :','["yellow","red"]',', "baz" : { "name": "alice" }}')))),(0,n.kt)("h3",{id:"meta-data-requirements"},"Meta data requirements"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Frame type must be set to ",(0,n.kt)("inlineCode",{parentName:"li"},"FrameTypeLogLines"),"/",(0,n.kt)("inlineCode",{parentName:"li"},"log-lines")),(0,n.kt)("li",{parentName:"ul"},"Frame meta can optionally specify ",(0,n.kt)("inlineCode",{parentName:"li"},"preferredVisualisationType:logs")," as meta data. Without this property, explore page will be rendering the logs data as table instead in logs view")),(0,n.kt)("h3",{id:"invalid-cases"},"Invalid cases"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Frame without time field"),(0,n.kt)("li",{parentName:"ul"},"Frame without string field"),(0,n.kt)("li",{parentName:"ul"},'Frame with field name "tsNs" where the type of the "tsNs" field is not number.')),(0,n.kt)("h2",{id:"useful-links"},"Useful links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md"},"OTel Logs Data Model")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.google.com/document/d/1WQDz1jF0yKBXe3OibXWfy3g6lor9SvjZ4xT-8uuDCiA/edit#"},"OTel Logs Level")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/hr-time/"},"Javascript high resolution timestamp"))))}d.isMDXComponent=!0}}]);